var Transform = require('stream').Transform;
var eachKeys = require('../each-keys');
var noop = function () { return ''; };

function ViewStream(options) {
  options = options || {};
  Transform.call(this, options);
  this._writableState.objectMode = true;
  this._readableState.objectMode = false;
  this._errorHandler = options.errorHandler || noop;
  this.on('streamError', this._onStreamError.bind(this));
}

ViewStream.prototype = Object.create(Transform.prototype, {
  constructor: { value: ViewStream }
});

ViewStream.prototype.pipe = function (response) {
  this._response = response;
  return Transform.prototype.pipe.call(this, response);
};

ViewStream.prototype._transform = function (obj, enc, done) {
  this._setResponseHeaders(obj.headers);
  this._setResponseStatusCode(obj.statusCode || 200);
  this.push(obj.output);
  done();
};

ViewStream.prototype._flush = function (done) {
  done();
};

ViewStream.prototype._setResponseHeaders = function (headers) {
  headers = headers || {};
  headers['content-type'] = headers['content-type'] || 'text/html; charset=UTF-8';

  eachKeys(this._setResponseHeader.bind(this), headers);
};

ViewStream.prototype._setResponseHeader = function (name, value) {
  this._response.setHeader(name, value);
};

ViewStream.prototype._onStreamError = function (error) {
  this._setResponseStatusCode(error.statusCode || 500);
  this._setResponseHeaders(error.headers);
  this._emitErrorToResponse(error);
};

ViewStream.prototype._setResponseStatusCode = function (statusCode) {
  this._response.statusCode = statusCode;
};

ViewStream.prototype._emitErrorToResponse = function (error) {
  this._response.end(this._errorHandler(error) || '');
};

module.exports = ViewStream;
