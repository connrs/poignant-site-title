var BaseRequestHandler = require('./base-request-handler.js');
var ErrorRequestHandler = require('./error-request-handler.js');
var forEach = require('../for-each');
var onError = require('../on')('error');
var map = require('../map');

function RequestHandler() {
  BaseRequestHandler.apply(this, arguments);
}

RequestHandler.prototype = Object.create(BaseRequestHandler.prototype, {
  constructor: { value: RequestHandler }
});

RequestHandler.prototype.execute = function () {
  this._createViewStream();
  this._generateStreamsFromRoute();
  this._bindErrorsToViewStream();
  this._coupleStreams(this._concatStreams());
};

RequestHandler.prototype._concatStreams = function () {
  return [].concat(this._request, this._streams, this._viewStream, this._response);
};

RequestHandler.prototype._generateStreamsFromRoute = function () {
  var request = this._request;
  var response = this._response;
  var params = this._route.params;
  var mapCall = map(function (func) {
    return func({
      request: request,
      response: response,
      params: params
    });
  });

  this._streams = mapCall(this._route.action);
};

RequestHandler.prototype._bindErrorsToViewStream = function () {
  var viewStream = this._viewStream;
  var emitStreamError = function (error) {
    viewStream.emit('streamError', error);
  };
  var forEachEmitStreamError = forEach(onError(emitStreamError));

  forEachEmitStreamError(this._streams);

  return this;
};

RequestHandler.ErrorRequestHandler = ErrorRequestHandler;

RequestHandler.create = function (opts) {
  opts = opts || {};

  var handler = new RequestHandler();

  handler.setRequest(opts.request);
  handler.setResponse(opts.response);
  handler.setErrorHandler(opts.errorHandler);
  handler.setRoute(opts.route);

  return handler;
};

module.exports = RequestHandler;
