var Transform = require('stream').Transform;
var HTTPErrors = require('http-errors');

function AuthoriseUserByRoleStream(options) {
  options = options || {};
  options.objectMode = true;

  Transform.call(this, options);

  if (!options.roles) {
    this._roles = [];
  }
  else {
    this._roles = Array.isArray(options.roles) ? options.roles : [options.roles];
  }
}

AuthoriseUserByRoleStream.prototype = Object.create(Transform.prototype, {
  constructor: { value: AuthoriseUserByRoleStream }
});

AuthoriseUserByRoleStream.prototype._transform = function (data, enc, done) {
  if (this._userNotAuthorisedAgainstRoles(data)) {
    this.emit('error', new HTTPErrors.NotAuthorizedError());
  }
  else {
    this.push(data);
  }

  done();
};

AuthoriseUserByRoleStream.prototype._userNotAuthorisedAgainstRoles = function (data) {
  return !data.currentUser || (this._roles.length && !this._hasRole(data.currentUser));
};

AuthoriseUserByRoleStream.prototype._hasRole = function (currentUser) {
  var userRole = currentUser.toJSON().role_name;

  return this._roles.indexOf(userRole) !== -1;
};

module.exports = function authoriseUserByRoleStream(roles) {
  return new AuthoriseUserByRoleStream({
    roles: roles
  });
}

module.exports.AuthoriseUserByRole = AuthoriseUserByRoleStream;
