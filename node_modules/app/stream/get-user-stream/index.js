var Transform = require('stream').Transform;

function GetUser(options) {
  options = options || {};
  options.objectMode = true;

  this._loadUserSession = options.loadUserSession;
  this._userFinder = options.userFinder;
  this._userBuilder = options.userBuilder;

  Transform.call(this, options);
}

GetUser.prototype = Object.create(Transform.prototype, {
  constructor: { value: GetUser }
});

GetUser.prototype._transform = function (data, enc, done) {
  this._getUser(data.session.get('user_id'), function (err, user) {
    if (err) { return done(err); }

    data.currentUser = user || null;
    done(null, data);
  });
};

GetUser.prototype._flush = function (done) {
  done();
}

GetUser.prototype._getUser = function (userId, done) {
  this._loadUserSession(this._buildLoadUserSessionOptions(userId), done);
};

GetUser.prototype._buildLoadUserSessionOptions = function (userId) {
  return {
    userId: userId,
    userFinder: this._userFinder,
    userBuilder: this._userBuilder
  }
};

function getUser(options) {
  var stream = new GetUser(options);

  return stream;
}

module.exports = getUser;
