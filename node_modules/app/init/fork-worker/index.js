var DomainRequestHandler = require('./domain-request-handler.js');

function Worker(options) {
}

Worker.prototype.setLauncher = function (launcher) {
  this._launcher = launcher;
};

Worker.prototype.setCluster = function (cluster) {
  this._cluster = cluster;
};

Worker.prototype.setLogger = function (logger) {
  this._logger = logger;
};

Worker.prototype.setServerPort = function (serverPort) {
  this._serverPort = serverPort;
}

Worker.prototype.setDomain = function (domain) {
  this._domain = domain;
};

Worker.prototype.setCreateServer = function (createServer) {
  this._createServer = createServer;
};

Worker.prototype.exec = function () {
  this._launcher(this._serveApp.bind(this));
};

Worker.prototype._serveApp = function (err, app) {
  if (err) { return this._handleLauncherError(err); }

  this._app = app;
  this._startWebServer();
};

Worker.prototype._handleLauncherError = function (err) {
  this._disconnectWorker();
  this._logError(err);
};

Worker.prototype._disconnectWorker = function () {
  this._cluster.worker.disconnect();
};

Worker.prototype._logError = function (err) {
  this._logger(err);
};

Worker.prototype._startWebServer = function () {
  var self = this;
  var server = this._createServer(function (req, res) {
    self._runRequestInDomain(req, res, server);
  });

  server.listen(this._getServerPort());
};

Worker.prototype._getServerPort = function () {
  return this._serverPort || 8080;
};

Worker.prototype._runRequestInDomain = function (req, res, server) {
    var requestListener = this._getRequestListener();
    var domain = this._domain.create();

    domain.add(req);
    domain.add(res);
    domain.on('error', this._handleUnrecoverableError(server, res));
    domain.run(function () {
      requestListener(req, res);
    });
};

Worker.prototype._getRequestListener = function () {
  return this._app.requestListener;
};

Worker.prototype._handleUnrecoverableError = function (server, res) {
  var self = this;

  return function (err) {
    try {
      self._logError(err);
      var killtimer = setTimeout(function () {
        process.exit(1)
      }, 30000);

      killtimer.unref();
      server.close();
      self._disconnectWorker();
      res.statusCode = 500;
      res.setHeader('content-type', 'text/plain');
      res.end('Oops, there was a problem!\n');
    }
    catch (err2) {
      
    }
  };
};

function forkWorker(options) {
  var worker = new Worker();

  worker.setLauncher(options.launcher);
  worker.setCluster(options.cluster);
  worker.setLogger(options.logger);
  worker.setCreateServer(options.createServer);
  worker.setServerPort(options.serverPort);
  worker.setDomain(options.domain);
  worker.exec();
}

module.exports = forkWorker;
