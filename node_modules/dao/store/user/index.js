function hasOwnProperty(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

var lazyRelations = {};
var raw = require('bookshelf').PG.knex.raw;
var Model = require('dao/store/base');
var User = Model.extend({
  idAttribute: 'user_id',
  hasTimestamps: ['inserted_at', 'updated_at'],
  tableName: 'user',
  sync: function (options) {
    var sync = Model.prototype.sync.apply(this, arguments);
    var superSelect = sync.select;

    sync.select = function (options) {
      var columns = [
        'user.user_id', 'identity.identity_id', 'identity.uid AS identity_uid', 'provider.provider_id', 'provider.name AS provider_name',
        'user.name', 'user.email', 'user.url', 'role.role_id', 'role.description AS role_description', 'role.name AS role_name'
      ];
      var provider_id;
      var uid;
      var query;

      if (sync.options.provider_id) {
        provider_id = sync.options.provider_id;
        delete sync.options.provider_id;
      }

      if (sync.options.uid) {
        uid = sync.options.uid;
        delete sync.options.uid;
      }

      query = sync.query.column(columns);

      query = query.join('identity', function () {
        this.on('identity.user_id', '=', 'user.user_id');
      });
      query = query.whereNull('identity.deleted_at');

      if (uid === undefined) {
        query = query.whereNotNull('identity.primary_identity');
      }
      else {
        query = query.where('identity.uid', uid);
      }

      query = query.join('provider', function () {
        this.on('provider.provider_id', '=', 'identity.provider_id');
      });
      query = query.whereNull('provider.deleted_at');

      if (provider_id !== undefined) {
        query = query.where('identity.provider_id', provider_id);
        query = query.where('provider.provider_id', provider_id);

      }

      query = query.leftJoin('admin_user', function () {
        this.on('admin_user.user_id', 'user.user_id');
      });
      query = query.whereNull('admin_user.deleted_at');

      query = query.leftJoin('role', function () {
        this.on('role.role_id', 'admin_user.role_id');
      })
      query = query.whereNull('role.deleted_at');

      query = query.groupBy([
        'user.user_id', 'identity.identity_id', 'provider.provider_id', 'provider.name', 'identity.uid', 'user.name', 'user.email', 'user.url', 'role.role_id', 'role.description', 'role.name'
      ]);
      query = query.orderBy('user.name', 'ASC');

      return superSelect.call(this);
    };

    return sync;
  }
});

module.exports = User;
